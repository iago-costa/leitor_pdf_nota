# -*- coding: utf-8 -*-
"""leitor_pdf_nota.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HIZ6_e21xGVoqc1LNNXnPcD1t8_5tG6e

Script leitor de pdf de notas de corretagem para salvar planilhas automáticas

# Lendo PDF e salvando em texto
"""

!apt install libpoppler-cpp-dev
!pip install pdftotext
!pip install numpy

import pdftotext

# Load your PDF
with open("/content/drive/MyDrive/Investimento/Imposto/Notas/2021/TERRA/OUT/nota.pdf", "rb") as f:
  pdf = pdftotext.PDF(f)

# Save all text to a txt file.
with open('/content/drive/MyDrive/Investimento/Imposto/Notas/2021/TERRA/OUT/output.txt', 'w') as f:
  f.write("\n\n".join(pdf))

"""# Ler linhas do txt"""

scrap_lines = []
with open("/content/drive/MyDrive/Investimento/Imposto/Notas/2021/TERRA/OUT/output.txt") as file:
    for line in file:
        if "Tipo Mercado".lower() in last_line.lower():
          tipo_mercado_ii = last_line.split(" ")
          tipo_mercado_ii = list(filter(None, tipo_mercado_ii))
          print(tipo_mercado_ii)
          # scrap_lines.append(tipo_mercado_ii)
          tipo_mercado = line.split(" ")
          tipo_mercado = list(filter(None, tipo_mercado))
          print(tipo_mercado)
          scrap_lines.append(tipo_mercado[2])

        last_line = line

        if "Líquido das operações".lower() in line.lower():
          liquido_oparacoes = line.split(" ")
          liquido_oparacoes = list(filter(None, liquido_oparacoes))
          print(liquido_oparacoes)
          # scrap_lines.append(-liquido_oparacoes[-2])
          if liquido_oparacoes[-1] == 'D\n':
            scrap_lines.append('-'+liquido_oparacoes[-2])
          if liquido_oparacoes[-1] == 'C\n':
            scrap_lines.append('+'+liquido_oparacoes[-2])

        if "Total CBLC".lower() in line.lower():
          cblc = line.split(" ")
          cblc = list(filter(None, cblc))
          print(cblc)
          # scrap_lines.append(-cblc[-2])
          if cblc[-1] == 'D\n':
            scrap_lines.append('-'+cblc[-2])
          if cblc[-1] == 'C\n':
            scrap_lines.append('+'+cblc[-2])

        if "Total Bovespa".lower() in line.lower():
          corretagem_bovespa = line.split(" ")
          corretagem_bovespa = list(filter(None, corretagem_bovespa))
          print(corretagem_bovespa)
          # scrap_lines.append(corretagem_bovespa[-2])
          if corretagem_bovespa[-1] == 'D\n':
            scrap_lines.append('-'+corretagem_bovespa[-2])
          if corretagem_bovespa[-1] == 'C\n':
            scrap_lines.append('+'+corretagem_bovespa[-2])

        if "Total Corretagem".lower() in line.lower():
          total_corretagem = line.split(" ")
          total_corretagem = list(filter(None, total_corretagem))
          print(total_corretagem)
          # print(tipo_mercado[2])
          # scrap_lines.append(total_corretagem[-2])
          if total_corretagem[-1] == 'D\n':
            scrap_lines.append('-'+total_corretagem[-2])

          if total_corretagem[-1] == 'C\n':
            scrap_lines.append('+'+total_corretagem[-2])
          soma_despesas_totais = float(cblc[-2].replace('|', '').replace(',', '.'))+\
            float(corretagem_bovespa[-2].replace('|', '').replace(',', '.'))+\
            float(total_corretagem[-2].replace('|', '').replace(',', '.'))
          scrap_lines.append(str(soma_despesas_totais))

        if "Líquido para".lower() in line.lower():
          liquido_operacao = line.split(" ")
          liquido_operacao = list(filter(None, liquido_operacao))
          print(liquido_operacao)
          # scrap_lines.append(liquido_operacao[-2])
          if corretagem_bovespa[-1] == 'D\n':
            scrap_lines.append('-'+liquido_operacao[-2])
            if tipo_mercado[2] == 'OPCAO': 
              # print(float(liquido_operacao[-2].replace('|', '').replace(',', '.')))
              scrap_lines.append(str(float(liquido_operacao[-2].replace('|', '').replace(',', '.'))*0.15))
            else:
              scrap_lines.append('0')
          if corretagem_bovespa[-1] == 'C\n':
            scrap_lines.append('+'+liquido_operacao[-2])
            if tipo_mercado[2] == 'OPCAO': 
              scrap_lines.append(str(float(liquido_operacao[-2].replace('|', '').replace(',', '.'))*0.15))
            else:
              scrap_lines.append('0')
          scrap_lines.append(liquido_operacao[-3])

"""# Montar matriz"""

matriz = []
matriz.append(['Tipo operação', 'Valor Líquido das Operações', 'Total CBLC',  'Total Bovespa', 'Total Corretagem', 'Soma despesas (Bugado)', 'Líquido com descontos', 'Taxa para Pagar IR 6015', 'Data operação'])
print(scrap_lines)

scrap_lines = list(map(lambda x: x.replace("\n", ""), scrap_lines))
scrap_lines = list(map(lambda x: x.replace("|", ""), scrap_lines))
scrap_lines = list(map(lambda x: x.replace(".", ","), scrap_lines))
print(scrap_lines)

number_lists = int(len(scrap_lines)/9)
for i in range(number_lists+1):
  if i != 0:
    matriz.append(scrap_lines[(i-1)*9:i*9])
print(matriz)

"""# Gerar excel"""

# import numpy
import pandas as pd
# a = numpy.asarray(scrap_lines)
# a = a.reshape((2, 8))
pd.DataFrame(matriz).to_csv("/content/drive/MyDrive/Investimento/Imposto/Notas/2021/TERRA/OUT/output.xlsx")
pd.DataFrame(matriz).to_csv("/content/drive/MyDrive/Investimento/Imposto/Notas/2021/TERRA/OUT/output.csv")

"""


```
# This is formatted as code
Falta a especificação do título (ativo/opção)
Detalhes sobre a operação 
( 
  call/put 
  (venda/compra) 
  (vencimento) 
  quantidade
)

Ler várias notas automaticamente

```

"""